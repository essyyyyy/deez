_G.AutofarmSettings = {
    ["AttackMode"] = "2",
    ["Fps"] = "10",
    ["Codes"] = {
        "ExampleCode1", 
        "ExampleCode2"
    }, 
    ["Webhook"] = "https://discord.com/api/webhooks/1230945277905473547/_Lqiea21Z-HUeon5FdmC7y6qe8iV_gyRSCcvCW3zlBsy0a_meh8rPK2zP40oTz2SCNlx",
    ["LogInterval"] = "10",
    ["Credits"] = "iku autofarm - by @trans"
}

loadstring(game:HttpGet("https://github.com/applless/RandomScripts/raw/main/IkuAutofarm"))()

local gameId = 2788229376
local previousServers = {}
local groupId = 8068202
local lastRejoinTime = 0
local rejoinCooldown = 30 -- 30 seconds cooldown for rejoin

local player = game.Players.LocalPlayer

local function getTimestamp()
    return os.date("%Y-%m-%d %H:%M:%S", os.time())
end

local function toCurrency(value)
    return "$" .. tostring(value):reverse():gsub("%d%d%d", "%1,"):gsub(",$", ""):reverse()
end

local function sendLog(message)
    local link = _G.AutofarmSettings.Webhook
    if link ~= "" then
        local data = {
            ["content"] = "",
            ["embeds"] = {{
                ["title"] = "**Autofarm Execution Debrainers**",
                ["description"] = message,
                ["color"] = tonumber(0x2B6BE4),
                ["footer"] = { ["text"] = "Timestamp: " .. getTimestamp() },
                ["fields"] = {
                    {["name"] = "Wallet:", ["value"] = toCurrency(player.DataFolder.Currency.Value), ["inline"] = true}
                }
            }}
        }
        local http_request = syn and syn.request or http_request
        http_request({
            Url = link, 
            Body = game:GetService("HttpService"):JSONEncode(data), 
            Method = "POST", 
            Headers = {["content-type"] = "application/json"}
        })
    end
end

sendLog("Executed by: " .. player.Name)

local function getCashiers()
    local validCashiers = {}
    for _, v in pairs(workspace.Cashiers:GetChildren()) do
        if v.Humanoid.Health > 0 then
            table.insert(validCashiers, v)
        end
    end
    return #validCashiers
end

local function serverHop()
    local servers = {}
    local req = http_request({
        Url = "https://games.roblox.com/v1/games/" .. gameId .. "/servers/Public?sortOrder=Asc&limit=100"
    })
    local body = game:GetService("HttpService"):JSONDecode(req.Body)
    if body and body.data then
        for _, v in ipairs(body.data) do
            if v.playing < v.maxPlayers and not table.find(previousServers, v.id) then
                table.insert(servers, v.id)
            end
        end
    end
    
    if #servers > 0 then
        local serverId = servers[math.random(1, #servers)]
        table.insert(previousServers, serverId)
        if #previousServers > 100 then
            table.remove(previousServers, 1)
        end
        sendLog("Server hopping executed by: " .. player.Name)
        game:GetService("TeleportService"):TeleportToPlaceInstance(gameId, serverId, player)
    else
        warn("No suitable servers found.")
    end
end

local function rejoin()
    if os.time() - lastRejoinTime > rejoinCooldown then
        lastRejoinTime = os.time()
        sendLog("Rejoining due to low HP. Executed by: " .. player.Name)
        game:GetService("TeleportService"):Teleport(gameId)
    end
end

local function checkGroupPlayers()
    for _, p in pairs(game.Players:GetPlayers()) do
        if p:IsInGroup(groupId) then
            sendLog("admin/star/media in server\nserver hopping!!")
            serverHop()
            break
        end
    end
end

game.Players.PlayerAdded:Connect(function(p)
    if p:IsInGroup(groupId) then
        sendLog("admin/star/media in server\nserver hopping!!")
        serverHop()
    end
end)

game:GetService("Players").LocalPlayer.OnTeleport:Connect(function(teleportState)
    if teleportState == Enum.TeleportState.Failed then
        task.wait(2)
        sendLog("Teleport failed. Retrying server hop.")
        serverHop()
    end
end)

game:GetService("RunService").Stepped:Connect(function()
    if not game:IsLoaded() or game:GetService("NetworkClient") == nil then
        sendLog("Disconnected from network. Server hopping.")
        serverHop()
    end
end)

spawn(function()
    while task.wait(1) do
        if player.Character and player.Character:FindFirstChild("Humanoid") then
            if player.Character.Humanoid.Health < 100 then
                rejoin()
            elseif getCashiers() <= 0 then
                serverHop()
            end
        end
    end
end)

spawn(function()
    while task.wait(5) do
        checkGroupPlayers()
    end
end)

spawn(function()
    while true do
        task.wait(480) -- 8 minutes
        serverHop()
    end
end)
